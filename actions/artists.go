package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop/v5"
  "github.com/gobuffalo/x/responder"
  "jukedec_api/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Artist)
// DB Table: Plural (artists)
// Resource: Plural (Artists)
// Path: Plural (/artists)
// View Template Folder: Plural (/templates/artists/)

// ArtistsResource is the resource for the Artist model
type ArtistsResource struct{
  buffalo.Resource
}

// List gets all Artists. This function is mapped to the path
// GET /artists
func (v ArtistsResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  artists := &models.Artists{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Artists from the DB
  if err := q.All(artists); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    c.Set("artists", artists)
    return c.Render(http.StatusOK, r.HTML("/artists/index.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(artists))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(artists))
  }).Respond(c)
}

// Show gets the data for one Artist. This function is mapped to
// the path GET /artists/{artist_id}
func (v ArtistsResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Artist
  artist := &models.Artist{}

  // To find the Artist the parameter artist_id is used.
  if err := tx.Find(artist, c.Param("artist_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    c.Set("artist", artist)

    return c.Render(http.StatusOK, r.HTML("/artists/show.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(artist))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(artist))
  }).Respond(c)
}

// New renders the form for creating a new Artist.
// This function is mapped to the path GET /artists/new
func (v ArtistsResource) New(c buffalo.Context) error {
  c.Set("artist", &models.Artist{})

  return c.Render(http.StatusOK, r.HTML("/artists/new.plush.html"))
}
// Create adds a Artist to the DB. This function is mapped to the
// path POST /artists
func (v ArtistsResource) Create(c buffalo.Context) error {
  // Allocate an empty Artist
  artist := &models.Artist{}

  // Bind artist to the html form elements
  if err := c.Bind(artist); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(artist)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the new.html template that the user can
      // correct the input.
      c.Set("artist", artist)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/artists/new.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "artist.created.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/artists/%v", artist.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.JSON(artist))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.XML(artist))
  }).Respond(c)
}

// Edit renders a edit form for a Artist. This function is
// mapped to the path GET /artists/{artist_id}/edit
func (v ArtistsResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Artist
  artist := &models.Artist{}

  if err := tx.Find(artist, c.Param("artist_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  c.Set("artist", artist)
  return c.Render(http.StatusOK, r.HTML("/artists/edit.plush.html"))
}
// Update changes a Artist in the DB. This function is mapped to
// the path PUT /artists/{artist_id}
func (v ArtistsResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Artist
  artist := &models.Artist{}

  if err := tx.Find(artist, c.Param("artist_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind Artist to the html form elements
  if err := c.Bind(artist); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(artist)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the edit.html template that the user can
      // correct the input.
      c.Set("artist", artist)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/artists/edit.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "artist.updated.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/artists/%v", artist.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(artist))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(artist))
  }).Respond(c)
}

// Destroy deletes a Artist from the DB. This function is mapped
// to the path DELETE /artists/{artist_id}
func (v ArtistsResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Artist
  artist := &models.Artist{}

  // To find the Artist the parameter artist_id is used.
  if err := tx.Find(artist, c.Param("artist_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy(artist); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a flash message
    c.Flash().Add("success", T.Translate(c, "artist.destroyed.success"))

    // Redirect to the index page
    return c.Redirect(http.StatusSeeOther, "/artists")
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(artist))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(artist))
  }).Respond(c)
}
