package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop/v5"
  "github.com/gobuffalo/x/responder"
  "jukedec_api/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (BandMember)
// DB Table: Plural (band_members)
// Resource: Plural (BandMembers)
// Path: Plural (/band_members)
// View Template Folder: Plural (/templates/band_members/)

// BandMembersResource is the resource for the BandMember model
type BandMembersResource struct{
  buffalo.Resource
}

// List gets all BandMembers. This function is mapped to the path
// GET /band_members
func (v BandMembersResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  bandMembers := &models.BandMembers{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all BandMembers from the DB
  if err := q.All(bandMembers); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    c.Set("bandMembers", bandMembers)
    return c.Render(http.StatusOK, r.HTML("/band_members/index.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(bandMembers))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(bandMembers))
  }).Respond(c)
}

// Show gets the data for one BandMember. This function is mapped to
// the path GET /band_members/{band_member_id}
func (v BandMembersResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty BandMember
  bandMember := &models.BandMember{}

  // To find the BandMember the parameter band_member_id is used.
  if err := tx.Find(bandMember, c.Param("band_member_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    c.Set("bandMember", bandMember)

    return c.Render(http.StatusOK, r.HTML("/band_members/show.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(bandMember))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(bandMember))
  }).Respond(c)
}

// New renders the form for creating a new BandMember.
// This function is mapped to the path GET /band_members/new
func (v BandMembersResource) New(c buffalo.Context) error {
  c.Set("bandMember", &models.BandMember{})

  return c.Render(http.StatusOK, r.HTML("/band_members/new.plush.html"))
}
// Create adds a BandMember to the DB. This function is mapped to the
// path POST /band_members
func (v BandMembersResource) Create(c buffalo.Context) error {
  // Allocate an empty BandMember
  bandMember := &models.BandMember{}

  // Bind bandMember to the html form elements
  if err := c.Bind(bandMember); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(bandMember)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the new.html template that the user can
      // correct the input.
      c.Set("bandMember", bandMember)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/band_members/new.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "bandMember.created.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/band_members/%v", bandMember.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.JSON(bandMember))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.XML(bandMember))
  }).Respond(c)
}

// Edit renders a edit form for a BandMember. This function is
// mapped to the path GET /band_members/{band_member_id}/edit
func (v BandMembersResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty BandMember
  bandMember := &models.BandMember{}

  if err := tx.Find(bandMember, c.Param("band_member_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  c.Set("bandMember", bandMember)
  return c.Render(http.StatusOK, r.HTML("/band_members/edit.plush.html"))
}
// Update changes a BandMember in the DB. This function is mapped to
// the path PUT /band_members/{band_member_id}
func (v BandMembersResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty BandMember
  bandMember := &models.BandMember{}

  if err := tx.Find(bandMember, c.Param("band_member_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind BandMember to the html form elements
  if err := c.Bind(bandMember); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(bandMember)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the edit.html template that the user can
      // correct the input.
      c.Set("bandMember", bandMember)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/band_members/edit.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "bandMember.updated.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/band_members/%v", bandMember.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(bandMember))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(bandMember))
  }).Respond(c)
}

// Destroy deletes a BandMember from the DB. This function is mapped
// to the path DELETE /band_members/{band_member_id}
func (v BandMembersResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty BandMember
  bandMember := &models.BandMember{}

  // To find the BandMember the parameter band_member_id is used.
  if err := tx.Find(bandMember, c.Param("band_member_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy(bandMember); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a flash message
    c.Flash().Add("success", T.Translate(c, "bandMember.destroyed.success"))

    // Redirect to the index page
    return c.Redirect(http.StatusSeeOther, "/band_members")
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(bandMember))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(bandMember))
  }).Respond(c)
}
